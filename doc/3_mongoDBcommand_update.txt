출처 : https://velopert.com/545
본문에 data샘플이 있으니 참조할것



#MongoDB에서는 update() 메소드를 통하여 데이터를 수정 
 - update() 메소드의 기본 옵션으로는 단 하나의 document를 수정합니다.
#구조
 - db.collection.update(
					   <query>,
					   <update>,
					   {
						 upsert: <boolean>,
						 multi: <boolean>,
						 writeConcern: <document>
					   }
					)
#Parameter
 - query(document)					업데이트 할 document의 criteria 를 정합니다. find() 메소드 에서 사용하는 query 와 같습니다.
 - update(document)					document에 적용할 변동사항입니다.
 - upsert(boolean-Optional) 		(기본값: false) 이 값이 true 로 설정되면 query한 document가 없을 경우, 새로운 document를 추가합니다.
 - multi(boolean-Optional) 			(기본값: false) 이 값이 true 로 설정되면, 여러개의 document 를 수정합니다.
 - writeConcern(document-Optional)  wtimeout 등 document 업데이트 할 때 필요한 설정값입니다. 기본 writeConcern을 사용하려면 이 파라미터를 생략하세요. 자세한 내용은 매뉴얼을 참조해주세요.
 
 
#예제
 - 특정 field 업데이트 하기
	Abet document 의 age를 20으로 변경한다
	> db.people.update( { name: "Abet" }, { $set: { age: 20 } } )
 
 - document를 replace 하기
	Betty document를 새로운 document로 대체한다.
	> db.people.update( { name: "Betty" }, { "name": "Betty 2nd", age: 1 })
 
 - 특정 field를 제거하기
	David document의 score field를 제거한다
	> db.people.update( { name: "David" }, { $unset: { score: 1 } } )
 
 - criteria에 해당되는 document가 존재하지 않는다면 새로 추가하기
	upsert 옵션을 설정하여 Elly document가 존재하지 않으면 새로 추가
	> db.people.update( { name: "Elly" }, { name: "Elly", age: 17 }, { upsert: true } )
 
 - 여러 document의 특정 field를 수정하기
	age가 20 보다 낮거나 같은 document의 score를 10으로 설정
	> db.people.update(
		{ age: { $lte: 20 } },
		{ $set: { score: 10 } },
		{ multi: true }
		)
		
 - 배열에 값 추가하기
	Charlie document의 skills에 "c++" 와 "java" 를 추가하고 알파벳순으로 정렬
	> db.people.update(
		{ name: "Charlie" },
		{ $push: {
			skills: {
				$each: [ "c++", "java" ],
				$sort: 1
				}
			}
		}
	)
 - 배열에 값 제거하기
	Charlie document에서 skills 값의 mongodb 제거
	> db.people.update(
		{ name: "Charlie" },
		{ $pull: { skills: "mongodb" } }
	)

 - Charlie document에서 skills 배열 중 "angularjs" 와 "java" 제거
	> db.people.update(
		{ name: "Charlie" },
		{ $pull: { skills: { $in: ["angularjs", "java" ] } } }
	)